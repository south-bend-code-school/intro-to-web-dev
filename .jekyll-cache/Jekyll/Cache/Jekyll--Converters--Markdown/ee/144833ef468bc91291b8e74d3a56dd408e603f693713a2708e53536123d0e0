I"×I<h1 id="introduction-to-javascript-js-objects-and-loops">Introduction to JavaScript (JS): Objects and Loops</h1>

<h2 id="goal">Goal</h2>
<p>By the end of this lesson, you should have an understanding of JavaScript loops, object, arrays, and how them in code.</p>

<h2 id="overview">Overview</h2>
<p>This lesson will build on our current knowledge of JavaScript variables and conditionals in order to do repetitive tasks quickly and use JS objects to manage data.</p>

<h2 id="topics">Topics</h2>

<h3 id="arrays">Arrays</h3>

<h4 id="concept-making-arrays">Concept: Making arrays</h4>
<p>Earlier, we saw that variables could be both numbers and strings like so:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>var aNumber = 5
var aString = 'Hi there!'
</code></pre></div></div>

<p>But there are more things in coding than just numbers and strings. One of those things is an <strong>array</strong>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>var anArray = [1,2,3]
</code></pre></div></div>

<p>What are we looking at here? Letâ€™s start with what we know. We know that <code class="language-plaintext highlighter-rouge">var</code> means we are declaring a variable and <code class="language-plaintext highlighter-rouge">anArray</code> is going to be the name of that variable. Then, we know that the <code class="language-plaintext highlighter-rouge">=</code> means we are <strong>assigning</strong> whatever is to the right of the <code class="language-plaintext highlighter-rouge">=</code> to the variable <code class="language-plaintext highlighter-rouge">anArray</code>. But what is <code class="language-plaintext highlighter-rouge">[1,2,3]</code>?</p>

<p><code class="language-plaintext highlighter-rouge">[1,2,3]</code> is an <strong>array</strong>. An <strong>array</strong> is a list of elements. The elements in this case are numbers but they can be strings, other arrays, or anything really. You know something is an <strong>array</strong> if it stars with <code class="language-plaintext highlighter-rouge">[</code>, <code class="language-plaintext highlighter-rouge">]</code>, and the elements on the inside are separated by commas. The following is an example of another array:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>var anotherArray = ['cat', 5, [13, 'dude']]
</code></pre></div></div>

<p>We can see in the <strong>array</strong> above, we first have the string <code class="language-plaintext highlighter-rouge">'cat'</code>, the number <code class="language-plaintext highlighter-rouge">5</code>, and finally another <strong>array</strong> with 2 elements in it, <code class="language-plaintext highlighter-rouge">13</code> and <code class="language-plaintext highlighter-rouge">'dude'</code>.</p>

<h4 id="challenge">Challenge</h4>

<p>Go to this <a href="https://codepen.io/jorymullet/pen/qBaaBVE" target="_blank">CodePen</a> and follow the instructions.</p>

<h4 id="concept-adding-to-arrays">Concept: Adding to arrays</h4>
<p>So, we know what <strong>arrays</strong> look like and how to make them. But once an <strong>array</strong> is made, how do we add to it? And how do we get one of it elements?</p>

<p>Letâ€™s start with the first question, how to add to an array? Letâ€™s look at an example:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>var arr = []
arr.push(5)

// value of arr is [5]

</code></pre></div></div>

<p>In order to add an element to an <strong>array</strong>, we first type the name of the <strong>array</strong> (in this case, <code class="language-plaintext highlighter-rouge">arr</code>) and then add <code class="language-plaintext highlighter-rouge">.push</code> after it. Then, whatever elements we want to add to the <strong>array</strong>, we put in paranthesis behind <code class="language-plaintext highlighter-rouge">arr.push</code>. This is telling the <strong>array</strong> to add whatever element we are passing into <code class="language-plaintext highlighter-rouge">.push</code> to the end of the <strong>array</strong>.</p>

<p>Another example:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>var arr = []

arr.push(5)
arr.push(10)
arr.push(20)

// value of arr is [5, 10, 20]
</code></pre></div></div>

<p>The above example shows us first setting <code class="language-plaintext highlighter-rouge">arr</code> equal to an empty <strong>array</strong>. Then we <strong>push</strong> 3 elements into the <strong>array</strong>, first the <code class="language-plaintext highlighter-rouge">5</code>, then the <code class="language-plaintext highlighter-rouge">10</code>, and lastly the <code class="language-plaintext highlighter-rouge">20</code>. Each element is being added to the back of the <strong>array</strong>.</p>

<h4 id="challenge-1">Challenge</h4>

<p>Go to this <a href="https://codepen.io/jorymullet/pen/GRjjQMb" target="_blank">CodePen</a> and follow the instructions.</p>

<h4 id="concept-getting-values-from-an-array">Concept: Getting values from an array</h4>

<p>Okay, so we know how to make and add to an array, but how do we access individual elements inside an <strong>array</strong>? Chech out the code below:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>var arr = [1,2,3,4]

var aNumber = arr[2]
var anotherNumber = arr[3]

// value of aNumber is 3
// value of anotherNumber is 4
</code></pre></div></div>

<p>Above, the first thing did was make an array, <code class="language-plaintext highlighter-rouge">[1,2,3,4]</code>. Then, in the next line, we are declaring a variable <code class="language-plaintext highlighter-rouge">aNumber</code> and assigning <code class="language-plaintext highlighter-rouge">arr[2]</code> to it. What does <code class="language-plaintext highlighter-rouge">arr[2]</code> mean?</p>

<p><code class="language-plaintext highlighter-rouge">arr[2]</code> is saying this: <em>From of the array <code class="language-plaintext highlighter-rouge">arr</code>, get the element that is at the 2nd index.</em> BUT, looking at the comment in the code, it says that <code class="language-plaintext highlighter-rouge">aNumber</code> is equal to <code class="language-plaintext highlighter-rouge">3</code>. However, it looks like <code class="language-plaintext highlighter-rouge">3</code> is in the 3rd spot, not the 2nd. <strong class="red">In code, we do not consider the first element in an array to be at the 1st index, but at the 0th index.</strong> This can be very annoying when first learning to code but eventually makes a lot of sense.</p>

<p>So, in the code above, if we wanted to get the first value in <code class="language-plaintext highlighter-rouge">arr</code>, we would have to use <code class="language-plaintext highlighter-rouge">arr[0]</code>. Again, this may not make sense now but is actually a really nice feature of coding.</p>

<h4 id="challenge-2">Challenge</h4>

<p>Go to this <a href="https://codepen.io/jorymullet/pen/YzGGevM" target="_blank">CodePen</a> and follow the instructions.</p>

<h4 id="concept-additional-array-functionality">Concept: Additional array functionality</h4>

<p>Now that you have the basics down, here are some other helpful things you can do with arrays</p>

<h5 id="length">Length</h5>

<p>Often, when working with arrays, knowing the length of an array will be helpful. Luckily, itâ€™s easy:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>var arr = [1,2,3]
var len = arr.length

// value of len is 3
</code></pre></div></div>

<h5 id="concatenation">Concatenation</h5>

<p>Sometimes, we will want to combine 2 arrays into 1. The fancy, coding name for this process is called <strong>concatenation</strong>. JS makes this easy:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>var arr1 = [1,2,3]
var arr2 = [3,4,5]

var longArr1 = arr1.concat(arr2)

// value of longArr1 is [1,2,3,3,4,5]

var longArr2 = arr2.concat(arr1)

// value of longArr2 is [3,4,5,1,2,3]
</code></pre></div></div>
<h5 id="includes">Includes</h5>

<p>Occasionally, we are going to wonder if an array has a certain element in it. By using <strong>includes</strong>, we can find out if an element exists in an array:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>var arr = [1,3,5,7,9]

var is5Included = arr.includes(5)
var is8Included = arr.includes(8)

// value of is5Included is `true`
// value of is8Included is `false`
</code></pre></div></div>

<h5 id="indexof">indexOf</h5>

<p>When we want to know the index of en element in an array, we we <code class="language-plaintext highlighter-rouge">indexOf</code> to find its index. If we ask for the index of an element that isnâ€™t in an array, <code class="language-plaintext highlighter-rouge">indexOf</code> returns <code class="language-plaintext highlighter-rouge">-1</code></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>var arr = [1,3,5,7,9]

var indexOf5 = arr.indexOf(5)
var indexOf8 = arr.indexOf(8)

// value of is5Included is 2
// value of is8Included is -1
</code></pre></div></div>

<h4 id="challenge-3">Challenge</h4>

<p>Try out these concepts at this <a href="https://codepen.io/jorymullet/pen/XWjgrVW" target="_blank">CodePen</a>.</p>

<h3 id="objects">Objects</h3>

<h4 id="concept-making-objects">Concept: Making objects</h4>

<p>Now that we know strings, numbers, and arrays, the next thing to learn are <strong>objects</strong>.</p>

<p>Below is an example of an <strong>object</strong> being set to the variable <code class="language-plaintext highlighter-rouge">person</code>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>var person = {
  name: "Joshua",
  age: 27,
  occupation: "Web Developer",
}
</code></pre></div></div>

<p>So, first we can see a variable named <code class="language-plaintext highlighter-rouge">person</code>. Then we see curly brackets with words, numbers, and strings inside. What is going on? Letâ€™s break what we are seeing down bit by bit.</p>

<p>To start, every object will start with a <code class="language-plaintext highlighter-rouge">{</code> and end with a <code class="language-plaintext highlighter-rouge">}</code> as you can see from the example above. So letâ€™s strip away everything else except the stuff in the middle:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  name: "Joshua",
  age: 27,
  occupation: "Web Developer",
</code></pre></div></div>

<p>By just looking at these 3 lines, things become clearer. It seems that variable <code class="language-plaintext highlighter-rouge">person</code> is an <strong>object</strong> where its <code class="language-plaintext highlighter-rouge">name</code> is <code class="language-plaintext highlighter-rouge">"Joshua"</code>, the <code class="language-plaintext highlighter-rouge">age</code> is <code class="language-plaintext highlighter-rouge">27</code>, and the <code class="language-plaintext highlighter-rouge">occupation</code> is <code class="language-plaintext highlighter-rouge">"Web Developer"</code>. In the example above, <code class="language-plaintext highlighter-rouge">name</code>, <code class="language-plaintext highlighter-rouge">age</code>, and <code class="language-plaintext highlighter-rouge">occupation</code> are all <strong>keys</strong> and <code class="language-plaintext highlighter-rouge">"Joshua"</code>, <code class="language-plaintext highlighter-rouge">27</code>, and <code class="language-plaintext highlighter-rouge">"Web Developer"</code> are all <strong>values</strong>. <strong>Objects</strong> are simply a list of <strong>key</strong>/<strong>value</strong> pairs separated by commas. <strong>Keys</strong> are always just a word that describes the <strong>value</strong> (which can be a number, string, an array, or even another <strong>object</strong>).</p>

<p><strong>Objects</strong> are really neat because they allow us to describe and create concepts in code like how I described a <code class="language-plaintext highlighter-rouge">person</code> above. Letâ€™s look at another example:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>var cat = {
  fur: "long",
  age: 3,
  favoriteActivities: ["pouncing", "eating", "sleeping"],
}
</code></pre></div></div>

<p>Using only code, I was able to create and describe a <code class="language-plaintext highlighter-rouge">cat</code>! This might seem silly now but <strong>objectâ€™s</strong> practical use is endless. Letâ€™s look at one more example before moving on:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>var playingCard = {
  suit: "hearts",
  value: 9,
}
</code></pre></div></div>

<p>In the previous example, I created a <code class="language-plaintext highlighter-rouge">playingCard</code> with just a few lines of code. I didnâ€™t even introduce the idea of a playing card nor did I have to. The <strong>object</strong> and variable name made it obvious. This is one reason why <strong>objects</strong> are so useful and powerful.</p>

<h4 id="challenge-4">Challenge</h4>

<p>Go to this <a href="https://codepen.io/jorymullet/pen/RwGgjMe" target="_blank">CodePen</a> and follow the instructions.</p>

<h4 id="concept-get-values-from-object">Concept: Get values from object</h4>

<p>Now that we know how to build <strong>objects</strong> in JS, it would also be useful to be able to get values we have put in our <strong>objects</strong>.</p>

<p>Letâ€™s look back at the first example:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>var person = {
  name: "Joshua",
  age: 27,
  occupation: "Web Developer",
}
</code></pre></div></div>

<p>Above, we have the variable <code class="language-plaintext highlighter-rouge">person</code>. Imagine later in my code, I wanted to get the <code class="language-plaintext highlighter-rouge">name</code> of <code class="language-plaintext highlighter-rouge">person</code>. It is as simple as this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>var justTheName = person.name

// value of justTheName is "Joshua"
</code></pre></div></div>

<p>Pretty cool, right? All we do is add a dot (<code class="language-plaintext highlighter-rouge">.</code>) and the <strong>key</strong> (<code class="language-plaintext highlighter-rouge">name</code>) and we will get the <strong>value</strong>.</p>

<p>Using the same <strong>object</strong> <code class="language-plaintext highlighter-rouge">person</code>, I can create an introduction like so:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>var intro = "Hi! I'm " + person.name + ". I am " + person.age + " years old and work as a " + person.occupation + "."

// value of intro is "Hi! I'm Joshua. I am 27 years old and work as a Web Developer."
</code></pre></div></div>

<p>Wow! So handy.</p>

<h4 id="challenge-5">Challenge</h4>

<p>Go to this <a href="https://codepen.io/jorymullet/pen/LYRLOar" target="_blank">CodePen</a> and follow the instructions.</p>

<h4 id="concept-edit-an-object">Concept: Edit an object</h4>

<p>We now know how to build <strong>objects</strong> and get <strong>values</strong> from them. But what if we want to add a value to an existing object? What about deleting a <strong>key</strong>/<strong>value</strong> pair? Or overwriting an existing <strong>value</strong>? These things are all possible and simple with <strong>objects</strong>.</p>

<p>Letâ€™s again start with our <code class="language-plaintext highlighter-rouge">person</code> <strong>object</strong> as the example:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>var person = {
  name: "Joshua",
  age: 27,
  occupation: "Web Developer",
}
</code></pre></div></div>

<p>Letâ€™s first look at adding a <strong>key</strong>/<strong>value</strong> pair:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>person.nameOfPet = "Fido"

// value of person is {
//  name: "Joshua",
//  age: 27, 
//  occupation: "Web Developer", 
//  nameOfPet: "Fido",
//}
</code></pre></div></div>

<p>As you can see from the example above, if we want to add to an <strong>object</strong>, we simply must reference the <strong>object</strong> (<code class="language-plaintext highlighter-rouge">person</code>), add a dot (<code class="language-plaintext highlighter-rouge">.</code>), name the <strong>key</strong> (<code class="language-plaintext highlighter-rouge">nameOfPet</code>), and set that all equal to the <strong>value</strong> we want (<code class="language-plaintext highlighter-rouge">"Fido"</code>). Easy peasy!</p>

<p>Next, letâ€™s look at an example of deleting a <strong>key</strong>/<strong>value</strong> pair from an <strong>object</strong>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>delete person.occupation

// value of person is {
//  name: "Joshua",
//  age: 27, 
//  nameOfPet: "Fido",
//}
</code></pre></div></div>

<p>It looks a little strange, but the way to delete from an <strong>object</strong> is to type the <code class="language-plaintext highlighter-rouge">delete</code> followed by the reference to the <strong>object</strong> (<code class="language-plaintext highlighter-rouge">person</code>), add a dot (<code class="language-plaintext highlighter-rouge">.</code>), followed by the name of the <strong>key</strong> that you are trying to delete.</p>

<p>Finally, letâ€™s look at overwriting a <strong>key</strong>/<strong>value</strong> pair that already exists.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>person.name = "Ryan"

// value of person is {
//  name: "Ryan",
//  age: 27, 
//  nameOfPet: "Fido",
//}
</code></pre></div></div>

<p>We can overwrite <strong>key</strong>/<strong>value</strong> in the exact same way we add new <strong>key</strong>/<strong>value</strong> pairs. The only difference is that <strong>key</strong> already existed.</p>

<h4 id="challenge-6">Challenge</h4>

<p>Go to this <a href="https://codepen.io/jorymullet/pen/LYRLeBo" target="_blank">CodePen</a> and follow the instructions.</p>
:ET